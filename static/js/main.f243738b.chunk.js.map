{"version":3,"sources":["device/index.jsx","App.jsx","serviceWorker.js","index.js"],"names":["Device","props","this","deviceId","Number","match","params","device","getDevice","className","to","name","id","hwKey","type","checked","immobilizer","readOnly","keyInHolder","doors","fuelCard","handBrake","GPS","ignition","LTE","title","src","width","height","frameBorder","min","max","defaultValue","charge","mileage","distance","React","App","state","devices","data","removalQueue","addRemovalQueue","bind","remove","cleanQueue","setState","filter","event","target","find","path","exact","length","role","map","key","onClick","component","reactRouterProps","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f243738b.chunk.js","sourcesContent":["import * as React from 'react';\nimport { Link } from \"react-router-dom\";\nimport './index.css';\n\nclass Device extends React.Component {\n    render() {\n        const props = this.props;\n        const deviceId = Number(this.props.match.params.deviceId);\n        const device = props.getDevice(deviceId);\n\n        return (\n            <React.Fragment>\n                <Link className=\"return-button\" to=\"/\">\n                    {'<'}\n                </Link>\n                <div className=\"edit-device-container\">\n                    <div className=\"cotrol-panel-container\">\n                        <h1 className=\"device-name\">{`Device ${device.name}`}</h1>\n                        <dl>\n                            <dt>Device ID</dt>\n                            <dd>{device.id}</dd>\n                            <dt>HW Key</dt>\n                            <dd>{device.hwKey}</dd>\n                        </dl>\n                        <label>\n                            Immobilizer\n                        <input type=\"checkbox\" checked={device.immobilizer} readOnly />\n                        </label>\n                        <label>\n                            Key in holder\n                        <input type=\"checkbox\" checked={device.keyInHolder} readOnly />\n                        </label>\n                        <label>\n                            Doors\n                        <input type=\"checkbox\" checked={device.doors} readOnly />\n                        </label>\n                        <label>\n                            Fuelcard\n                        <input type=\"checkbox\" checked={device.fuelCard} readOnly />\n                        </label>\n                        <label>\n                            Handbrake\n                        <input type=\"checkbox\" checked={device.handBrake} readOnly />\n                        </label>\n                        <label>\n                            GPS\n                        <input type=\"checkbox\" checked={device.GPS} readOnly />\n                        </label>\n                        <label>\n                            Ignition\n                        <input type=\"checkbox\" checked={device.ignition} readOnly />\n                        </label>\n                        <label>\n                            LTE\n                        <input type=\"checkbox\" checked={device.LTE} readOnly />\n                        </label>\n                    </div>\n                    <div className=\"readonly-container\">\n                        <div className=\"map-container\">\n                            <h2 className=\"map-header\">Location</h2>\n                            <iframe title=\"location\" src=\"https://www.google.com/maps/embed?pb=!1m18!1m12!1m3!1d2428.6269185688543!2d13.405674315871698!3d52.5039926798111!2m3!1f0!2f0!3f0!3m2!1i1024!2i768!4f13.1!3m3!1m2!1s0x47a84f770258424b%3A0xe2238a7de65a344!2sProShare!5e0!3m2!1sen!2sde!4v1574634806861!5m2!1sen!2sde\" width=\"648\" height=\"406\" frameBorder=\"0\" />\n                        </div>\n                        <div className=\"vital-statistics-container\">\n                            <label className=\"vital-statistics\">\n                                Charge\n                                <input\n                                    className=\"vital-output\"\n                                    type=\"range\"\n                                    min=\"0\"\n                                    max=\"100\"\n                                    defaultValue={device.charge}\n                                    readOnly\n                                />\n                            </label>\n                            <span>\n                                {device.charge} %\n                            </span>\n                            <label className=\"vital-statistics\">\n                                Mileage\n                                <input\n                                    className=\"vital-output\"\n                                    type=\"text\"\n                                    defaultValue={device.mileage}\n                                    readOnly\n                                />\n                            </label>\n                            <span>\n                                km\n                            </span>\n                            <label className=\"vital-statistics\">\n                                Distance\n                                <input\n                                    className=\"vital-output\"\n                                    type=\"number\"\n                                    defaultValue={device.distance}\n                                    readOnly\n                                />\n                            </label>\n                            <span>\n                                km\n                            </span>\n                        </div>\n                    </div>\n                </div>\n            </React.Fragment>\n        );\n    };\n}\n\nexport default Device;\n","import * as React from 'react';\nimport {\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\";\nimport Device from './device';\n\nimport './App.css';\n\nimport data from './data.json';\n\nclass App extends React.Component {\n  constructor() {\n    super();\n\n    this.state = {\n      devices: data,\n      removalQueue: null,\n    };\n\n    this.addRemovalQueue = this.addRemovalQueue.bind(this);\n    this.remove = this.remove.bind(this);\n    this.cleanQueue = this.cleanQueue.bind(this);\n    this.getDevice = this.getDevice.bind(this);\n  }\n\n  remove() {\n    this.setState({\n      devices: this.state.devices.filter((device) => {\n        return device.id !== this.state.removalQueue;\n      }),\n    });\n\n    this.cleanQueue();\n  }\n\n  addRemovalQueue(event) {\n    this.setState({\n      removalQueue: Number(event.target.name),\n    });\n  }\n\n  cleanQueue() {\n    this.setState({\n      removalQueue: null,\n    });\n  }\n\n  getDevice(id) {\n    return this.state.devices.find((device) => {\n      return device.id === id;\n    });\n  }\n\n  render() {\n    const state = this.state;\n\n    return (\n      <React.Fragment>\n        <header className=\"header\"></header>\n        <main className=\"dashboard-container\">\n          <Switch>\n            <Route path=\"/\" exact>\n              <button className=\"add-device-button\" type=\"button\">\n                ✚&nbsp;&nbsp;Add Device\n              </button>\n              <h1 className=\"dashboard-name\">Device Simulator Dashboard</h1>\n              {state.devices.length ?\n                <div className=\"table\" role=\"table\">\n                  <div className=\"table-row header-row\" role=\"rowgroup\">\n                    <div className=\"table-column-header first-cell\" role=\"columnheader\">Name</div>\n                    <div className=\"table-column-header\" role=\"columnheader\">Device ID</div>\n                    <div className=\"table-column-header\" role=\"columnheader\">HW Key</div>\n                    <div className=\"table-column-header\" role=\"columnheader\">Charge</div>\n                    <div className=\"table-column-header\" role=\"columnheader\">GPS</div>\n                    <div className=\"table-column-header\" role=\"columnheader\">Mileage</div>\n                    <div className=\"table-column-header\"></div>\n                  </div>\n                  {state.devices.map((device) => {\n                    return (\n                      <div className=\"table-row row-shadow\" role=\"rowgroup\" key={device.id}>\n                        <div className=\"table-cell first-cell\" role=\"cell\">{device.name}</div>\n                        <div className=\"table-cell\" role=\"cell\">{device.id}</div>\n                        <div className=\"table-cell\" role=\"cell\">{device.hwKey}</div>\n                        <div className=\"table-cell\" role=\"cell\">{`${device.charge}%`}</div>\n                        <div className=\"table-cell\" role=\"cell\">{device.GPS ? 'On' : 'Off'}</div>\n                        <div className=\"table-cell\" role=\"cell\">{device.mileage}</div>\n                        <div className=\"table-cell\" role=\"cell\">\n                          <Link\n                            className=\"device-action edit-device-button\"\n                            to={`/device/${device.id}`}\n                          >\n                            Edit\n                          </Link>\n                          <button\n                            className=\"device-action delete-device-button\" type=\"button\"\n                            name={device.id}\n                            onClick={this.addRemovalQueue}\n                          >\n                            Delete\n                    </button>\n                        </div>\n                      </div>\n                    );\n                  })}\n                </div>\n                :\n                <p>\n                  There is no devices yet.\n                </p>\n              }\n              {state.removalQueue &&\n                <div className=\"modal-wrap\">\n                  <div className=\"modal\">\n                    <div className=\"modal-text\">\n                      Are you sure you want to delete that device?\n                    </div>\n                    <button\n                      className=\"button button-secondary\"\n                      type=\"button\"\n                      onClick={this.cleanQueue}\n                    >\n                      Cancel\n                    </button>\n                    <button\n                      className=\"button button-primary\" type=\"button\"\n                      onClick={this.remove}\n                    >\n                      Delete\n                    </button>\n                  </div>\n                </div>\n              }\n            </Route>\n            <Route\n             path=\"/device/:deviceId\"\n             component={(reactRouterProps) => {\n               return (\n                <Device\n                  getDevice={this.getDevice}\n                 {...reactRouterProps}\n                />\n               );\n             }}\n            />\n          </Switch>\n        </main>\n      </React.Fragment>\n    );\n  }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {BrowserRouter} from \"react-router-dom\";\n\nReactDOM.render(\n    <BrowserRouter>\n        <App />\n    </BrowserRouter>,\n    document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}